<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[linux环境下安装mysql]]></title>
    <url>%2Flinux%E4%B8%8B%E5%AE%89%E8%A3%85mysql.html</url>
    <content type="text"><![CDATA[首先明确大体步骤为3步 1.下载数据库的压缩包或二进制包，可以在linux用wget或yum下载,也可以外网下载再传到linux 2.配置数据库的环境和路径 3.登陆数据库修改 一. 我这里是用 1wget https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.22-linux-glibc2.12-x86_64.tar.gz 下载 解压文件，移动到/usr/local 123tar zxvf mysql-5.7.22-linux-glibc2.12-x86_64.tar.gz mv mysql-5.7.22-linux-glibc2.12-x86_64 mysqlmv mysql /usr/local 创建用户和用户组 123groupadd mysqluseradd -r -g mysql mysql 将安装目录所有者及所属组改为mysql ，这个根据自己的目录来 1chown -R mysql.mysql /usr/local/mysql 在mysql目录下创建data文件夹 12cd /usr/local/mysqlmkdir data 初始化数据库 1/usr/local/mysql/bin/mysqld --user=mysql --basedir=/usr/local/mysql/ --datadir=/usr/local/mysql/data --initialize 如果还是报错可以执行下面命令，然后再执行上面数据库初始化的命令 1yum -y install numactl.x86_64 修改 /etc/my.cnf 已存在可删除再新建，将下面的内容粘贴到配置文件中 123456789101112131415[mysqld]datadir=/usr/local/mysql/databasedir=/usr/local/mysqlsocket=/tmp/mysql.sockuser=mysqlport=3306character-set-server=utf8# 取消密码验证skip-grant-tables# Disabling symbolic-links is recommended to prevent assorted security riskssymbolic-links=0# skip-grant-tables[mysqld_safe]log-error=/var/log/mysqld.logpid-file=/var/run/mysqld/mysqld.pid 将mysql加入到服务 1cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysql 开机启动 1chkconfig mysql on 启动mysql 1service mysql start 三.设置mysql密码（因为在配置文件取消了密码验证，可以直接回车键） 12mysql -u root -p或者 /usr/local/mysql/bin/mysql -uroot -p 使用第二个命令是没有配置环境变量 1export PATH=$PATH:/usr/local/mysql/bin 操作数据库设置密码 12345use mysql;update user set authentication_string=password(&apos;你的密码&apos;) where user=&apos;root&apos;;或者#set password=password(&quot;root&quot;);flush privileges;exit 将 /etc/my.cnf 中skip-grant-tables删除或注释掉，修改了配置文件重新登录会提示再次修改密码 123mysql -u root -palter user &apos;root&apos;@&apos;localhost&apos; identified by&apos;修改后的密码&apos;;exit 设置可以远程连接 12345mysql -u root -puse mysql;update user set host=&apos;%&apos; where user = &apos;root&apos;;flush privileges;exit]]></content>
  </entry>
  <entry>
    <title><![CDATA[命令]]></title>
    <url>%2F%E5%91%BD%E4%BB%A4.html</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[树莓派舵机测试]]></title>
    <url>%2F%E6%A0%91%E8%8E%93%E6%B4%BE%E8%88%B5%E6%9C%BA%E6%B5%8B%E8%AF%95.html</url>
    <content type="text"><![CDATA[舵机测试代码 python 12345678910111213141516171819202122232425262728#!/usr/bin/env python import RPi.GPIO as GPIO import time import signal import atexit atexit.register(GPIO.cleanup) GPIO.setmode(GPIO.BCM) GPIO.setup(17, GPIO.OUT, initial=False) p = GPIO.PWM(17,50) #50HZ p.start(0) time.sleep(2) while(True): for i in range(0,181,10): p.ChangeDutyCycle(2.5 + 10 * i / 180) #设置转动角度 time.sleep(0.02) #等该20ms周期结束 p.ChangeDutyCycle(0) #归零信号 time.sleep(0.2) for i in range(181,0,-10): p.ChangeDutyCycle(2.5 + 10 * i / 180) time.sleep(0.02) p.ChangeDutyCycle(0) time.sleep(0.2)]]></content>
  </entry>
  <entry>
    <title><![CDATA[ngrok配合linux云服务器实现内网穿透]]></title>
    <url>%2Fngrok%E9%85%8D%E5%90%88linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F.html</url>
    <content type="text"><![CDATA[先设置域名解析 Step1 安装git和go 并 获取 ngrok 源码安装git和go 已安装则跳过 12345yum install gcc -yyum install git -yyum install mercurial git bzr subversion golang golang-pkg-windows-amd64 golang-pkg-windows-386 -y 非官方地址，修复了部分包无法获取 1git clone https://github.com/tutumcloud/ngrok.git Step2 生成自签名证书— *注意:下述指令中的域名要换成大家自己的哦,不然就绑定到我的域名上去了~ 1234567891011121314151617cd ngrok mkdir cert cd certexport NGROK_DOMAIN=&quot;abc.com&quot;openssl genrsa -out rootCA.key 2048openssl req -x509 -new -nodes -key rootCA.key -subj &quot;/CN=$NGROK_DOMAIN&quot; -days 5000 -out rootCA.pemopenssl genrsa -out device.key 2048openssl req -new -key device.key -subj &quot;/CN=$NGROK_DOMAIN&quot; -out device.csropenssl x509 -req -in device.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out device.crt -days 5000 替换(提示overwrite输入y) 12345cp rootCA.pem ../assets/client/tls/ngrokroot.crtcp device.crt ../assets/server/tls/snakeoil.crtcp device.key ../assets/server/tls/snakeoil.key Step3：编译生成服务端，这一步耗时较长，耐心等 1sudo make release-server 根据客户端类型选择对应版本 12345678910111213#Linux 平台 32 位系统：GOOS=linux GOARCH=386#Linux 平台 64 位系统：GOOS=linux GOARCH=amd64#Windows 平台 32 位系统：GOOS=windows GOARCH=386#Windows 平台 64 位系统：GOOS=windows GOARCH=amd64#MAC 平台 32 位系统：GOOS=darwin GOARCH=386#MAC 平台 64 位系统：GOOS=darwin GOARCH=amd64#ARM 平台：GOOS=linux GOARCH=arm例如我的是树莓派客户端sudo GOOS=linux GOARCH=arm make release-client 执行生成客户端后，根据不同平台客户端存在不同的文件夹，里面的ngrok文件就是客户端文件 1234567将客户端文件下载客户端 服务器 本地路径scp username@serverIp:/ngrok/bin/linux_arm/ngrok /home/ubunutu/ngrok上传只需将两者调换，文件夹则需要加 -r赋予执行权限sudo chmod +x ngrok Step4：运行服务端启动服务端 1./bin/ngrokd -domain=&quot;$NGROK_DOMAIN&quot; 其他配置-httpAddr=80 此配置用来指定映射域名http访问的端口 默认80 -httpsAddr=443 https的访问端口 默认443 -tunnelAddr=4443 客户端连接的端口 默认4443 以上端口，如若与系统其他服务有冲突，开启服务时请自行配置其他端口 客户端客户端在ngrok文件同一目录下 创建 ngrok.cfg 配置文件 12server_addr: &quot;ngrok.ouyangm.xyz:4443&quot; trust_host_root_certs: false 运行 1./ngrok -subdomain ngrok -proto=http -config=ngrok.cfg 80 如果需要转发多个端口或者内网的其他电脑需要完善ngrok.cfg 123456789101112131415161718192021222324server_addr: ngrok.moonwalker.me:4443trust_host_root_certs: falsetunnels: ssh: remote_port: 1122 proto: tcp: 22 ss: emote_port: 8388 proto: tcp: 8388 ftp: remote_port: 20 proto: tcp: 20 ftp2: remote_port: 21 proto: tcp: 21 http: subdomain: www proto: http: 80 https: 192.168.1.4:443 启动特定的转发 1./ngrok -config ngrok.cfg start ssh ss 大家有问题可以在下方评论，多谢支持～]]></content>
      <tags>
        <tag>raspberrypi</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[树莓派制作监控]]></title>
    <url>%2F%E6%A0%91%E8%8E%93%E6%B4%BE%E5%88%B6%E4%BD%9C%E7%9B%91%E6%8E%A7.html</url>
    <content type="text"><![CDATA[启动motion1systemctl start motion &amp;&amp; motion #配置文件地址 1/etc/motion/motion.conf]]></content>
      <tags>
        <tag>raspberrypi</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[树莓派录制、发射红外信号]]></title>
    <url>%2F%E6%A0%91%E8%8E%93%E6%B4%BE%E5%BD%95%E5%88%B6%E3%80%81%E5%8F%91%E5%B0%84%E7%BA%A2%E5%A4%96%E4%BF%A1%E5%8F%B7.html</url>
    <content type="text"><![CDATA[进入红外接收模式 1mode2 -d /dev/lirc1 修改配置文件1sudo vi /etc/lirc/lircd.conf.d/aircon.lircd.conf 配置文件模板12345678910111213141516171819202122232425262728293031323334353637383940begin remote name aircon flags RAW_CODES eps 30 aeps 100 gap 19991 begin raw_codes name on 8960 4454 656 1634 660 535 653 544 654 1634 660 1629 654 1635 690 1599 655 543 655 541 656 1632 663 535 653 1636 689 508 680 517 681 515 683 514 685 512 686 511 687 512 686 508 690 1599 695 1596 689 1599 684 1605 690 507 680 517 682 515 683 514 685 1604 690 507 681 1608 686 511 687 510 689 1600 683 514 685 19868 760 435 690 507 691 506 683 514 684 1605 689 507 681 516 682 515 683 514 768 429 686 511 688 509 689 509 680 1609 685 511 687 510 688 509 689 508 681 516 682 515 684 513 685 512 687 510 687 509 689 508 764 434 682 515 683 523 676 512 686 511 687 510 689 508 690 end raw_codesend remote 修改配置文件后，重启lirc服务1sudo systemctl restart lircd 发射信号1irsend SEND_ONCE aircon on]]></content>
      <tags>
        <tag>raspberrypi</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[简介]]></title>
    <url>%2F%E7%AE%80%E4%BB%8B.html</url>
    <content type="text"><![CDATA[啥也没写]]></content>
  </entry>
  <entry>
    <title><![CDATA[SetupVPN]]></title>
    <url>%2FSetupVPN.html</url>
    <content type="text"><![CDATA[– Chrome 添加 SetupVPN –此教程不限操作系统，mac、linux、windwos 都可以使用,安装方法相同 开始之前** 请先安装Chrome浏览器** 下载地址：Chrome;准备好 SetupVPN.crx 文件 下载地址（下载较慢可以使用迅雷或其他工具下载）：SetupVPN 1、进入扩展程序：网址输入 chrome://extensions/ 或者按下图操作 2、开启开发者模式 3、将crx插件拖入窗口（如果失败请看文末PS） 4、确定添加 5、点击右上角灰色的小云朵，打开SetupVPN面板，选择语言，注册账号（有账号可直接登录） 6、选择节点，推荐日本或洛杉矶节点，速度比较快 7、到这里就成功了，不用时请断开，不然访问国内网站会很慢 PS：如果拖放crx文件时出现：无法添加此扩展程序 或其他错误 浏览器地址输入：chrome://flags/#extensions-on-chrome-urlsExtensions on chrome:// URLs 这个设置为Enabled重启浏览器，重新拖放插件（参考3、4步骤）添加完成后 将 Extensions on chrome:// URLs 这个改回去，不然会一直提示 您使用的是不受支持的命令行标记… 结束语：此插件免费，速度和稳定性都不错，适合浏览网页，祝您上网愉快～]]></content>
  </entry>
  <entry>
    <title><![CDATA[项目]]></title>
    <url>%2F%E9%A1%B9%E7%9B%AE.html</url>
    <content type="text"><![CDATA[项目技术 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152 导出Excel 服务器导出,合并单元格，设置单元格格式，以及下载,导出PDF,上传图片及文件，打印，生成二维码，js es6新语法的使用，不同浏览器对语法的兼容 例如微信浏览器旧版不支持let，Vue 的使用及踩坑 ，加密算法 DES,AES,RSA 定义及实现 ,SQL优化，组合索引及分表分区,Git 命令 分支，合并冲突，回滚，授权，撤销权限，私有仓库及公有仓库 ,svn 创建仓库，合并冲突，回滚，，添加用户，授权 等常用命令 及常见问题 ，linux,macos的常用命令，服务器连接方式，数据库远程连接，防火墙设置，环境变量，软连接，硬连接saas 定义及实现界面UI常用控件，例如员工选择，地址选择,搜索条件，列表样式，界面主题风格webpack的使用，语法及常用命令 node 的常用命令，nrm切换源、vs，vscode,idea,xcode,的快捷键及基本语法，区别nosqlmongdb,redisJava webspring,spring cloudspring mvc,spring boot,struts2,spring security,shiro,mybatis/ibatis,hibenate, JCacheC# web.net mvc.net entity framework.net CacheC# c端winformnode V8webpackvuerecatsocket.io前端 框架bootstarplayuiiview负载均衡nginx服务器集群缓存技术数据库缓存服务器缓存客户端缓存sqlserver,mysql,oracle,关系型数据库的搭建、整合]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Home</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[技术]]></title>
    <url>%2F%E6%8A%80%E6%9C%AF.html</url>
    <content type="text"><![CDATA[#前端技术关于Html1、html语义化标签的理解、结构化的理解；能否写出简洁的html结构；SEO优化。2、h5中新增的属性，如自定义属性data、类名className等；新增表单元素；拖拽Drag。3、h5中新增的API、修改的API、废弃的API稍作了解（离线存储、audio、video）。2.关于CSS1、CSS选择器（三大特性）。2、BFC机制。3、盒模型。4、CSS模块化开发（封装）；SCSS和LESS的使用。5、屏幕适配以及页面自适应。6、CSS3中新增的选择器。7、CSS3中新增的属性，transform、trasition、animation等。3.关于布局1、标准文档流（padding + margin + 负margin）+ 浮动float + 定位 left + right + top + bottom。2、百分比布局：px单位用%num代替，占父级元素的百分比。3、flex弹性布局：主轴、辅助轴的几个属性。4、grid栅格布局：使用框架中的类名来替代，本质上还是百分比布局。4.关于JS基础1、变量数据类型及检测：基本 + 引用。2、运算符：算术 + 条件 + 逻辑 + 位 + 短路、隐式转换等。3、条件、循环、异常处理if、switch()&#123;case xxx:&#125;、try、catch、finally、throw。4、函数定义、调用方式（apply、call、直接调用）；传参：实参给形参赋值。5、字符串、数组、对象常用API。6、正则表达式。5.关于JS高级1、作用域、作用域链、闭包。2、原型、原型链、继承。3、函数上下文、this指向。4、js的运行机制、事件队列和循环。5、Ajax原理、axios库。6、同步、异步编程。7、jQuery源码学习。6.关于浏览器1、浏览器的构成和运行机制。2、浏览器内核。3、浏览器交互：BOM和DOM相关webApi、监听事件。4、浏览器缓存机制。5、浏览器的渲染原理。6、浏览器的安全性：跨域和攻击。7.关于网络协议1、HTTP协议。2、cookie、session、token。8.关于ES6语法1、字符串、数组、对象扩展的api。2、变量扩展：let、const解构赋值，块级作用域。3、函数扩展：箭头函数默认参数、rest参数。4、展开运算符、模板字符串。5、set和map数据结构。6、迭代器和生成器函数next和yield的理解。7、proxy对象属性代理器：属性的读取（get）和设置（set）相关操作。8、promise对象、异步编程的解决方案。9、async + await：异步编程的终极方案promise + generator的语法糖。10、class语法、构造函数的语法糖。11、模块化编程export + import的导出和导入。9.VUE基础1、基本指令。2、实例的属性和方法。3、实例的生命周期。4、组件基础：创建、注册、添加属性方法、套用等。5、组件通信传值，父子、兄弟、跨级。6、插槽slot等。10.VUE高级1、vue-router：搭建SPA路由、组件的配置。路由间的传值。路由跳转。路由的导航守卫。记住在router.js和组件页面中的使用方式。2、vuex：状态管理、数据仓库store实例化仓库的5大属性的使用。state、getters、mutations、actions、modules。辅助函数mapState等，仓库中计算属性的映射、方便操作。记住在store.js和组件中使用方式。11.VUE深入、源码阅读1、数据响应式原理。2、virtual dom。3、diff 算法。4、nextTick等等。工程能力考察1.项目能力1、vue-cli脚手架搭建和功能配置vue.config.js。2、webpack的常用配置。3、项目构建打包。4、熟悉各类框架的文档。5、UI框架：Bootstrap、MUI、Element-ui等。6、常用的插件整理；整理一个自己插件库，封装自己的方法库、组件库。7、常用的工具熟练度。8、PC端和移动端开发注意事项。9、经验总结：快速确定项目的技术选型。10、坑点总结：项目遇到坑坑坑！11、项目中的性能优化记录（都是细节点，多记录）。12、需求文档的理解，可以结合项目流程图、UML图。13、问题解决能力：bug定位调试、查找文档、寻求他人。14、记录习惯养成。2.模块化、组件化开发能力1、项目分类；各类文件整理、分类。2、各类功能封装。3、组件和功能模块的抽离、解耦、复用。内功考察1.面向对象的编程思想1、类的抽象。2、对象的封装、继承。3、为了更好的去管理数据、分类数据，实现高内聚、低耦合。2.设计模式设计模式感觉也是将面向对象思想再度抽象成现实中某些特定模式。3.数据结构和算法1、学习常用的排序搜索算法、顺序表、链表、栈、队列、树、堆等。2、考验你的抽象思维和数学功底。3、将现实需求抽象成计算机代码的思维能力。4、LSM树，红黑树，二叉树、B树、B-树、B+树、B*树，数据库优化，范式及原理5、区块链，算法原理，深度学习，目标检测，语义分割 卷积，线代附加技能考察1.学习能力1、持续学习的态度——博客、笔记记录。2、技术论坛活跃度高、问答多。3、GitHub开源项目参与。2.了解一门后端语言1、python、node.js、php等。2、数据库mysql、redis、mongodb；sql的操作语句、mongodb的操作语句、redis的操作语句。3、node + express搭建本地服务等。4、python + django + request + scrapy。3.系统编程1、Linux命令行操作、系统文件管理。2、多任务、多线程、多进程、协程、并发、并行、串行、同步、异步等概念的理解。]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Home</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux/mac 常用命令]]></title>
    <url>%2FLinux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html</url>
    <content type="text"><![CDATA[Linux下的命令有几千条，但真正在实际开发中运用的就只有那些。1.查看操作系统版本 1cat /proc/version 2.查看主板版本 1cat /proc/cpuinfo 3.查看SD存储卡剩余空间 1df -h 4.查看ip地址 1ifconfig 5.压缩： 1tar –zcvf filename.tar.gz dirname 解压： 1tar –zxvf filename.tar.gz 6.linux系统常用apt(Advanced Package Tool)高级软件工具来安装软件 sudo apt-get install xxx 安装软件。 sudo apt-get update 更新软件列表。 sudo apt-get upgrade 更新已安装软件。 sudo apt-get remove xxx 删除软件。建议使用 apt替换 apt-get具体有关linux命令的教程：http://www.runoob.com/linux/linux-command-manual.html Linux 文件与目录管理我们知道Linux的目录结构为树状结构，最顶级的目录为根目录 /。其他目录通过挂载可以将它们添加到树中，通过解除挂载可以移除它们。在开始本教程前我们需要先知道什么是绝对路径与相对路径。绝对路径：路径的写法，由根目录 / 写起，例如： /usr/share/doc 这个目录。相对路径：路径的写法，不是由 / 写起，例如由 /usr/share/doc 要到 /usr/share/man 底下时，可以写成： cd ../man 这就是相对路径的写法啦！ 处理目录的常用命令接下来我们就来看几个常见的处理目录的命令吧：ls: 列出目录cd：切换目录pwd：显示目前的目录mkdir：创建一个新的目录rmdir：删除一个空的目录cp: 复制文件或目录rm: 移除文件或目录你可以使用 man [命令] 来查看各个命令的使用文档，如 ：man cp。ls (列出目录)在Linux系统当中， ls 命令可能是最常被运行的。语法： 123[root@www ~]# ls [-aAdfFhilnrRSt] 目录名称[root@www ~]# ls [--color=&#123;never,auto,always&#125;] 目录名称[root@www ~]# ls [--full-time] 目录名称 选项与参数：-a ：全部的文件，连同隐藏档( 开头为 . 的文件) 一起列出来(常用)-d ：仅列出目录本身，而不是列出目录内的文件数据(常用)-l ：长数据串列出，包含文件的属性与权限等等数据；(常用)将家目录下的所有文件列出来(含属性与隐藏档) 1[root@www ~]# ls -al ~ cd (切换目录)cd是Change Directory的缩写，这是用来变换工作目录的命令。语法： cd [相对路径或绝对路径] #使用 mkdir 命令创建 runoob 目录 1[root@www ~]# mkdir runoob #使用绝对路径切换到 runoob 目录 1[root@www ~]# cd /root/runoob/ #使用相对路径切换到 runoob 目录 1[root@www ~]# cd ./runoob/ 表示回到自己的家目录，亦即是 /root 这个目录 1[root@www runoob]# cd ~ 表示去到目前的上一级目录，亦即是 /root 的上一级目录的意思； 1[root@www ~]# cd .. 接下来大家多操作几次应该就可以很好的理解 cd 命令的。pwd (显示目前所在的目录)pwd 是 Print Working Directory 的缩写，也就是显示目前所在目录的命令。 1[root@www ~]# pwd [-P] 选项与参数：-P ：显示出确实的路径，而非使用连结 (link) 路径。实例：单纯显示出目前的工作目录： 12[root@www ~]# pwd/root &lt;== 显示出目录啦～ 实例显示出实际的工作目录，而非连结档本身的目录名而已。 1234567[root@www ~]# cd /var/mail &lt;==注意，/var/mail是一个连结档[root@www mail]# pwd/var/mail &lt;==列出目前的工作目录[root@www mail]# pwd -P/var/spool/mail &lt;==怎么回事？有没有加 -P 差很多～[root@www mail]# ls -ld /var/maillrwxrwxrwx 1 root root 10 Sep 4 17:54 /var/mail -&gt; spool/mail 看到这里应该知道为啥了吧？因为 /var/mail 是连结档，连结到 /var/spool/mail所以，加上 pwd -P 的选项后，会不以连结档的数据显示，而是显示正确的完整路径啊！mkdir (创建新目录)如果想要创建新的目录的话，那么就使用mkdir (make directory)吧。语法： 1mkdir [-mp] 目录名称 选项与参数：-m ：配置文件的权限喔！直接配置，不需要看默认权限 (umask) 的脸色～-p ：帮助你直接将所需要的目录(包含上一级目录)递归创建起来！实例：请到/tmp底下尝试创建数个新目录看看： 123456[root@www ~]# cd /tmp[root@www tmp]# mkdir test &lt;==创建一名为 test 的新目录[root@www tmp]# mkdir test1/test2/test3/test4mkdir: cannot create directory `test1/test2/test3/test4&apos;: No such file or directory &lt;== 没办法直接创建此目录啊！[root@www tmp]# mkdir -p test1/test2/test3/test4 加了这个 -p 的选项，可以自行帮你创建多层目录！实例：创建权限为 rwx–x–x 的目录。 12345[root@www tmp]# mkdir -m 711 test2[root@www tmp]# ls -ldrwxr-xr-x 3 root root 4096 Jul 18 12:50 testdrwxr-xr-x 3 root root 4096 Jul 18 12:53 test1drwx--x--x 2 root root 4096 Jul 18 12:54 test2 上面的权限部分，如果没有加上 -m 来强制配置属性，系统会使用默认属性。如果我们使用 -m ，如上例我们给予 -m 711 来给予新的目录 drwx–x–x 的权限。rmdir (删除空的目录)语法： rmdir [-p] 目录名称选项与参数：-p ：连同上一级『空的』目录也一起删除删除 runoob 目录 1[root@www tmp]# rmdir runoob/ 将 mkdir 实例中创建的目录(/tmp 底下)删除掉！ 12345678910[root@www tmp]# ls -l &lt;==看看有多少目录存在？drwxr-xr-x 3 root root 4096 Jul 18 12:50 testdrwxr-xr-x 3 root root 4096 Jul 18 12:53 test1drwx--x--x 2 root root 4096 Jul 18 12:54 test2[root@www tmp]# rmdir test &lt;==可直接删除掉，没问题[root@www tmp]# rmdir test1 &lt;==因为尚有内容，所以无法删除！rmdir: `test1&apos;: Directory not empty[root@www tmp]# rmdir -p test1/test2/test3/test4[root@www tmp]# ls -l &lt;==您看看，底下的输出中test与test1不见了！drwx--x--x 2 root root 4096 Jul 18 12:54 test2 利用 -p 这个选项，立刻就可以将 test1/test2/test3/test4 一次删除。不过要注意的是，这个 rmdir 仅能删除空的目录，你可以使用 rm 命令来删除非空目录。cp (复制文件或目录)cp 即拷贝文件和目录。语法: 12[root@www ~]# cp [-adfilprsu] 来源档(source) 目标档(destination)[root@www ~]# cp [options] source1 source2 source3 .... directory 选项与参数：-a：相当於 -pdr 的意思，至於 pdr 请参考下列说明；(常用)-d：若来源档为连结档的属性(link file)，则复制连结档属性而非文件本身；-f：为强制(force)的意思，若目标文件已经存在且无法开启，则移除后再尝试一次；-i：若目标档(destination)已经存在时，在覆盖时会先询问动作的进行(常用)-l：进行硬式连结(hard link)的连结档创建，而非复制文件本身；-p：连同文件的属性一起复制过去，而非使用默认属性(备份常用)；-r：递归持续复制，用於目录的复制行为；(常用)-s：复制成为符号连结档 (symbolic link)，亦即『捷径』文件；-u：若 destination 比 source 旧才升级 destination ！用 root 身份，将 root 目录下的 .bashrc 复制到 /tmp 下，并命名为 bashrc 123[root@www ~]# cp ~/.bashrc /tmp/bashrc[root@www ~]# cp -i ~/.bashrc /tmp/bashrccp: overwrite `/tmp/bashrc&apos;? n &lt;==n不覆盖，y为覆盖 rm (移除文件或目录)语法： rm [-fir] 文件或目录选项与参数：-f ：就是 force 的意思，忽略不存在的文件，不会出现警告信息；-i ：互动模式，在删除前会询问使用者是否动作-r ：递归删除啊！最常用在目录的删除了！这是非常危险的选项！！！ 将刚刚在 cp 的实例中创建的 bashrc 删除掉！ 12[root@www tmp]# rm -i bashrcrm: remove regular file `bashrc&apos;? y 如果加上 -i 的选项就会主动询问喔，避免你删除到错误的档名！mv (移动文件与目录，或修改名称)语法： 12[root@www ~]# mv [-fiu] source destination[root@www ~]# mv [options] source1 source2 source3 .... directory 选项与参数：-f ：force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖；-i ：若目标文件 (destination) 已经存在时，就会询问是否覆盖！-u ：若目标文件已经存在，且 source 比较新，才会升级 (update)复制一文件，创建一目录，将文件移动到目录中 1234[root@www ~]# cd /tmp[root@www tmp]# cp ~/.bashrc bashrc[root@www tmp]# mkdir mvtest[root@www tmp]# mv bashrc mvtest 将某个文件移动到某个目录去，就是这样做！将刚刚的目录名称更名为 mvtest2 1[root@www tmp]# mv mvtest mvtest2 Linux 文件内容查看Linux系统中使用以下命令来查看文件的内容：cat 由第一行开始显示文件内容tac 从最后一行开始显示，可以看出 tac 是 cat 的倒著写！nl 显示的时候，顺道输出行号！more 一页一页的显示文件内容less 与 more 类似，但是比 more 更好的是，他可以往前翻页！head 只看头几行tail 只看尾巴几行你可以使用 man [命令]来查看各个命令的使用文档，如 ：man cp。cat由第一行开始显示文件内容语法：cat [-AbEnTv]选项与参数：-A ：相当於 -vET 的整合选项，可列出一些特殊字符而不是空白而已；-b ：列出行号，仅针对非空白行做行号显示，空白行不标行号！-E ：将结尾的断行字节 $ 显示出来；-n ：列印出行号，连同空白行也会有行号，与 -b 的选项不同；-T ：将 [tab] 按键以 ^I 显示出来；-v ：列出一些看不出来的特殊字符检看 /etc/issue 这个文件的内容： 123[root@www ~]# cat /etc/issueCentOS release 6.4 (Final)Kernel \r on an \m tactac与cat命令刚好相反，文件内容从最后一行开始显示，可以看出 tac 是 cat 的倒着写！如： 1[root@www ~]# tac /etc/issue Kernel \r on an \mCentOS release 6.4 (Final)nl显示行号语法：nl [-bnw] 文件选项与参数：-b ：指定行号指定的方式，主要有两种：-b a ：表示不论是否为空行，也同样列出行号(类似 cat -n)；-b t ：如果有空行，空的那一行不要列出行号(默认值)；-n ：列出行号表示的方法，主要有三种：-n ln ：行号在荧幕的最左方显示；-n rn ：行号在自己栏位的最右方显示，且不加 0 ；-n rz ：行号在自己栏位的最右方显示，且加 0 ；-w ：行号栏位的占用的位数。实例一：用 nl 列出 /etc/issue 的内容 123[root@www ~]# nl /etc/issue 1 CentOS release 6.4 (Final) 2 Kernel \r on an \m more一页一页翻动 1[root@www ~]# more /etc/man.config Generated automatically from man.conf.in by theconfigure script.man.conf from man-1.6d….(中间省略)….–More–(28%) &lt;== 重点在这一行喔！你的光标也会在这里等待你的命令在 more 这个程序的运行过程中，你有几个按键可以按的：空白键 (space)：代表向下翻一页；Enter ：代表向下翻『一行』；/字串 ：代表在这个显示的内容当中，向下搜寻『字串』这个关键字；:f ：立刻显示出档名以及目前显示的行数；q ：代表立刻离开 more ，不再显示该文件内容。b 或 [ctrl]-b ：代表往回翻页，不过这动作只对文件有用，对管线无用。less一页一页翻动，以下实例输出/etc/man.config文件的内容： 1[root@www ~]# less /etc/man.config Generated automatically from man.conf.in by theconfigure script. man.conf from man-1.6d….(中间省略)….&lt;== 这里可以等待你输入命令！less运行时可以输入的命令有：空白键 ：向下翻动一页；[pagedown]：向下翻动一页；[pageup] ：向上翻动一页；/字串 ：向下搜寻『字串』的功能；?字串 ：向上搜寻『字串』的功能；n ：重复前一个搜寻 (与 / 或 ? 有关！)N ：反向的重复前一个搜寻 (与 / 或 ? 有关！)q ：离开 less 这个程序；head取出文件前面几行语法：head [-n number] 文件选项与参数：-n ：后面接数字，代表显示几行的意思1[root@www ~]# head /etc/man.config 默认的情况中，显示前面 10 行！若要显示前 20 行，就得要这样： 1[root@www ~]# head -n 20 /etc/man.config tail取出文件后面几行语法：tail [-n number] 文件选项与参数：-n ：后面接数字，代表显示几行的意思-f ：表示持续侦测后面所接的档名，要等到按下[ctrl]-c才会结束tail的侦测 1[root@www ~]# tail /etc/man.config 默认的情况中，显示最后的十行！若要显示最后的 20 行，就得要这样： 1[root@www ~]# tail -n 20 /etc/man.config 二．Vim编辑器及其配置Linux自带的编辑器有nano和vi，但vi编辑器使用起来很不方便，我们需要先下载vim编辑器，它是vi编辑器的升级版，更人性化些，接下来笔者就教大家如何在树莓派系统下安装和配置vim。首先更新索引源： 1sudo apt-get update 安装vim编辑器: 1sudo apt-get install vim 未配置vim时文档的显示无高亮，无行号，必须使用shift+：在命令模式下q退出。很麻烦！我们使用SSH Secure File Transfer工具将windows下的文件与树莓派的文件实现文件跨系统传输。（具体用法见文档1.4 SSH文件传输） 将搭建开发环境所需的工具与系统镜像目录中vimconfig.tar.gz文件通过SSH Secure File Transfer工具传输到树莓派系统的文件中。在命令行模式下输入tar xvf vimconfig.tar.gz 解压压缩包 进入vimconfig目录中运行config.sh脚本 会出现如下错误，不用急 我们只需要在/root/目录下新建.vim和.vimrc文件，还需要apt-get install ctags即可 配置好的vim编辑器： vi有3个模式：插入模式、命令模式、低行模式。 插入模式：在此模式下可以输入字符，按ESC将回到命令模式。 命令模式：可以移动光标、删除字符等。 低行模式：可以保存文件、退出vi、设置vi、查找等功能(低行模式也可以看作是命令模式里的)打开文件、保存、关闭文件(vi命令模式下使用) vi filename //打开filename文件 :w //保存文件 :q //退出编辑器，如果文件已修改请使用下面的命令 :q! //退出编辑器，且不保存 :wq //退出编辑器，且保存文件 插入文本或行(vi命令模式下使用，执行下面命令后将进入插入模式，按ESC键可退出插入模式) a //在当前光标位置的右边添加文本 i //在当前光标位置的左边添加文本 A //在当前行的末尾位置添加文本 I //在当前行的开始处添加文本(非空字符的行首) O //在当前行的上面新建一行 o //在当前行的下面新建一行 R //替换(覆盖)当前光标位置及后面的若干文本 J //合并光标所在行及下一行为一行(依然在命令模式)删除、恢复字符或行(vi命令模式下使用) x //删除当前字符 nx //删除从光标开始的n个字符 dd //删除当前行 ndd //向下删除当前行在内的n行 u //撤销上一步操作 U //撤销对当前行的所有操作复制、粘贴(vi命令模式下使用) yy //将当前行复制到缓存区 nyy //将当前行向下n行复制到缓冲区 yw //复制从光标开始到词尾的字符 nyw //复制从光标开始的n个单词 y^ //复制从光标到行首的内容 y$ //复制从光标到行尾的内容 p //粘贴剪切板里的内容在光标后 P //粘贴剪切板里的内容在光标前设置行号(vi命令模式下使用) :set nu //显示行号 :set nonu //取消显示行号]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Home</tag>
      </tags>
  </entry>
</search>
